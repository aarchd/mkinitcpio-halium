#!/usr/bin/ash

run_latehook() {
    local rootmnt partlist files module_list part path ab_slot_suffix vendor_images vendor_dlkm_images
    local search_vg root_lv reserved_lv persistent_lv _syspart

    tell_kmsg() {
        echo "initrd: $1" > /dev/kmsg || true
        mint --text "$1" || true
    }

    panic() {
        tell_kmsg "PANIC for reason: $1"
    }
    
    rootmnt="/new_root"
    
    partlist="userdata UDA DATAFS USERDATA"
    exec &> /dev/kmsg
    
    mkdir -p /lib/modules
    ln -sf /lib/modules "/lib/modules/$(uname -r)"
    
    files="/override/modules.load /lib/modules/modules.load /override/modules.load.recovery /lib/modules/modules.load.recovery"
    for file in $files; do
        if [ -f "$file" ]; then
            module_list="$file"
            break
        fi
    done
    
    if [ -n "$module_list" ]; then
        tell_kmsg "Loading kernel modules from $module_list"
    
        while read line; do
            set -- $line
            # Skip commented entries
            [ "$1" = "#" ] && continue
            tell_kmsg "Loading module $1"
            modprobe -a "$1"
        done < "${module_list}"
    fi
    
    tell_kmsg "Finished loading kernel modules"
    sleep 1
    
    udevadm settle
    
    if grep -q datapart= /proc/cmdline; then
        for x in $(cat /proc/cmdline); do
            case ${x} in
                datapart=*)
                    path=${x#*=}
                    ;;
            esac
        done
    fi
    
    if [ -z "$path" ]; then
        for partname in $partlist; do
            part=$(find /dev -name $partname | tail -1)
            [ -z "$part" ] && continue
            path=$(readlink -f $part)
            [ -n "$path" ] && break
        done
    fi
    
    if [ -e /proc/bootconfig ]; then
        ab_slot_suffix=$(grep -o 'androidboot\.slot_suffix = ".."' /proc/bootconfig | cut -d '"' -f2)
    fi
    if [ -z "$ab_slot_suffix" ]; then
        ab_slot_suffix=$(grep -o 'androidboot\.slot_suffix=..' /proc/cmdline |  cut -d "=" -f2)
    fi
    
    [ -n "$ab_slot_suffix" ] && tell_kmsg "A/B slot system detected! Slot suffix is $ab_slot_suffix"
    
    if [ -z "$path" ] && [ ! -z "$ab_slot_suffix" ] ; then
        tell_kmsg "Searching for A/B data partition on slot $ab_slot_suffix."
    
        for partname in $partlist; do
            part=$(find /dev -name "$partname$ab_slot_suffix" | tail -1)
            [ -z "$part" ] && continue
            path=$(readlink -f $part)
            [ -n "$path" ] && break
        done
    fi
    
    if [ -z "$path" ]; then
        panic "Couldn't find data partition."
    fi
    
    mkdir /vendor
    mkdir /vendor_dlkm
    if [ -e "/dev/disk/by-partlabel/super" ]; then
        tell_kmsg "Mapping super partition"
        losetup -r /dev/loop0 /dev/disk/by-partlabel/super
        /usr/sbin/dmsetup create --concise "$(/usr/sbin/parse-android-dynparts /dev/loop0)"
    fi
    
    vendor_images="/dev/disk/by-partlabel/vendor${ab_slot_suffix} /dev/disk/by-partlabel/vendor_a /dev/disk/by-partlabel/vendor_b /dev/mapper/dynpart-vendor /dev/mapper/dynpart-vendor${ab_slot_suffix} /dev/mapper/dynpart-vendor_a /dev/mapper/dynpart-vendor_b"
    for image in $vendor_images; do
        if [ -e $image ]; then
            tell_kmsg "mounting vendor from $image"
            mount $image /vendor -o ro
    
            if [ -e "/vendor/build.prop" ]; then
                tell_kmsg "found valid vendor partition: $image"
                break
            else
                tell_kmsg "$image is not a valid vendor partition"
                umount /vendor
            fi
        fi
    done
    
    vendor_dlkm_images="/dev/mapper/dynpart-vendor_dlkm /dev/mapper/dynpart-vendor_dlkm${ab_slot_suffix} /dev/mapper/dynpart-vendor_dlkm_a /dev/mapper/dynpart-vendor_dlkm_b"
    for image in $vendor_dlkm_images; do
        if [ -e $image ]; then
            tell_kmsg "mounting vendor_dlkm from $image"
            mount $image /vendor_dlkm -o ro
    
            if [ -e "/vendor_dlkm/etc/build.prop" ]; then
                tell_kmsg "found valid vendor_dlkm partition: $image"
                break
            else
                tell_kmsg "$image is not a valid vendor_dlkm partition"
                umount /vendor_dlkm
            fi
        fi
    done
    
    if grep -q droidian.lvm /proc/cmdline; then
        for x in $(cat /proc/cmdline); do
            case ${x} in
                droidian.lvm.vg=*)
                    search_vg=${x#*=}
                    ;;
                droidian.lvm.root_lv=*)
                    root_lv=${x#*=}
                    ;;
                droidian.lvm.reserved_lv=*)
                    reserved_lv=${x#*=}
                    ;;
                droidian.lvm.persistent_lv=*)
                    persistent_lv=${x#*=}
                    ;;
            esac
        done
    fi
    
    [ -z "${search_vg}" ] && search_vg="aarchd droidian"
    [ -z "${root_lv}" ] && root_lv="aarchd-rootfs droidian-rootfs"
    [ -z "${reserved_lv}" ] && reserved_lv="aarchd-reserved droidian-reserved"
    [ -z "${persistent_lv}" ] && persistent_lv="aarchd-persistent droidian-persistent"
    
    for try in 1 2 3 4 5; do
        lvm vgscan --mknodes
        for vg in ${search_vg}; do
            if lvm vgchange -ay ${vg}; then
                for rlv in ${root_lv}; do
                    if [ -e "/dev/${vg}/${rlv}" ]; then
                        tell_kmsg "Found LVM VG ${vg}, LV ${rlv}"
                        _syspart="/dev/${vg}/${rlv}"
                        break 2
                    fi
                done
            fi
        done
        [ -n "${_syspart}" ] && break
        sleep 2
    done
    
    if [ -z "${_syspart}" ]; then
        tell_kmsg "No LVM VG found :("
    fi
    
    mkdir -p /halium-system
    
    tell_kmsg "Halium rootfs is $_syspart"
    
    tell_kmsg "mounting system rootfs at /halium-system"
    if [ -n "$_syspart" ]; then
        mount -o rw $_syspart /halium-system
        if [ -e /halium-system/var/lib/halium/requires-lvm-resize ]; then
            lvm pvresize ${path}
            lvm lvresize -l +100%FREE ${_syspart}
    
            if [ "$(blkid ${_syspart} -o value -s TYPE)" == "ext4" ]; then
                e2fsck -fy ${_syspart}
                resize2fs -f ${_syspart}
            else
                tell_kmsg "Unsupported filesystem on part ${_syspart}"
            fi
            rm -f /halium-system/var/lib/halium/requires-lvm-resize
        fi
    fi
    
    mkdir -p /android-rootfs
    mkdir -p /android-system
    
    ANDROID_IMAGE="/halium-system/var/lib/lxc/android/android-rootfs.img"
    if [ ! -f "${ANDROID_IMAGE}" ]; then
        tell_kmsg "WARNING: Android system image not found."
    fi
    
    mount -o loop,ro "${ANDROID_IMAGE}" /android-rootfs \
        || tell_kmsg "WARNING: Failed to mount Android system.img."
    mount -o bind /android-rootfs/system /android-system
    
    if [ -n "$_syspart" ]; then
        tell_kmsg "Normal boot"
    
        mount --move /halium-system ${rootmnt}
        mkdir -p ${rootmnt}/android
        mount --move /android-rootfs ${rootmnt}/var/lib/lxc/android/rootfs
        mount -o bind ${rootmnt}/var/lib/lxc/android/rootfs ${rootmnt}/android
        mkdir -p ${rootmnt}/android/data ${rootmnt}/android/system
        mkdir -p ${rootmnt}/userdata/android-data
        mount -o bind ${rootmnt}/userdata/android-data ${rootmnt}/android/data
        [ ! -h ${rootmnt}/data ] && ln -sf /android/data ${rootmnt}/data
    
        tell_kmsg "moving Android system to /android/system"
        mount --move /android-system ${rootmnt}/android/system
    
        if [ -e "/vendor/build.prop" ]; then
            tell_kmsg "moving Android vendor to /android/vendor"
            mkdir -p ${rootmnt}/android/vendor
            mount --move /vendor ${rootmnt}/android/vendor
        fi
    
        if [ -e "/vendor_dlkm/etc/build.prop" ]; then
            tell_kmsg "moving Android vendor_dlkm to /android/vendor_dlkm"
            mkdir -p ${rootmnt}/android/vendor_dlkm
            mount --move /vendor_dlkm ${rootmnt}/android/vendor_dlkm
        fi
    
        [ -e ${rootmnt}/userdata/SWAP.img ] && swapon ${rootmnt}/userdata/SWAP.img
    else
        panic "Couldn't find system partition."
    fi
}

# vim: set ft=sh ts=4 sw=4 et:
