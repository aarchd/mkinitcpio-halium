#!/usr/bin/ash
# shellcheck shell=dash

run_latehook() {
    local rootmnt partlist files module_list part path ab_slot_suffix vendor_images vendor_dlkm_images
    local udev_rules_file usb_iface network_function
    local android_usb=/sys/class/android_usb/android0
    local gadget_dir=/config/usb_gadget

    write() {
    	echo -n "$2" >"$1"
    }

    usb_setup_configfs() {
        G_USB_ISERIAL=$gadget_dir/g1/strings/0x409/serialnumber
    
        mkdir $gadget_dir/g1
        write $gadget_dir/g1/idVendor                   "0x18D1"
        write $gadget_dir/g1/idProduct                  "0xD001"
        mkdir $gadget_dir/g1/strings/0x409
        write $gadget_dir/g1/strings/0x409/serialnumber "$1"
        write $gadget_dir/g1/strings/0x409/manufacturer "initrd"
        write $gadget_dir/g1/strings/0x409/product      "Failed to boot"
    
        for function in ncm.usb0 rndis.usb0 rndis_bam.rndis; do
            mkdir $gadget_dir/g1/functions/$function && network_function=$function && break
        done

        mkdir $gadget_dir/g1/configs/c.1
        mkdir $gadget_dir/g1/configs/c.1/strings/0x409
        write $gadget_dir/g1/configs/c.1/strings/0x409/configuration "rndis"
    
        ln -s $gadget_dir/g1/functions/$network_function $gadget_dir/g1/configs/c.1
    
        for f in /sys/class/udc/*; do
            [ -e "$f" ] || break
            name=$(basename "$f")
            case $name in
                dummy*) ;;
                *) echo "$name" > "$gadget_dir/g1/UDC"; break ;;
            esac
        done
    }
    
    usb_setup_android_usb() {
        G_USB_ISERIAL=$android_usb/iSerial
        write $android_usb/enable          0
        write $android_usb/functions       ""
        write $android_usb/enable          1
        sleep 0.5
        write $android_usb/enable          0
        write $android_usb/idVendor        18D1
        write $android_usb/idProduct       D001
        write $android_usb/iManufacturer   "initrd"
        write $android_usb/iProduct        "Failed to boot"
        write $android_usb/iSerial         "$1"
        write $android_usb/functions       "rndis"
        write $android_usb/enable          1
    }
    
    usb_setup() {
        mkdir /config || true
        mount -t configfs none /config || true
    
        if [ -d $android_usb ]; then
            usb_setup_android_usb "$1"
        elif [ -d $gadget_dir ]; then
            usb_setup_configfs "$1"
        fi
    }
    
    usb_info() {
        sleep 1
        write "$G_USB_ISERIAL" "$1"
    }
    
    inject_loop() {
    	INJ_DIR=/init-ctl
    	INJ_STDIN=$INJ_DIR/stdin
    
    	mkdir $INJ_DIR
    	mkfifo $INJ_STDIN
    	echo "This entire directory is for debugging init - it can safely be removed" >$INJ_DIR/README
    
    	while :; do
    		while read -r IN; do
    			if [ "$IN" = "continue" ]; then break 2; fi
    			$IN
    		done <$INJ_STDIN
    	done
    	rm -rf $INJ_DIR
    }

    tell_kmsg() {
        echo "initrd: $1" > /dev/kmsg || true
        mint --text "$1" || true
    }

    panic() {
        tell_kmsg "PANIC for reason: $1"
        usb_setup "initrd telnet 192.168.2.15"
        if ifconfig rndis0 "$LOCAL_IP"; then
            usb_iface=rndis0
        elif /sbin/ifconfig usb0 "$LOCAL_IP"; then
            usb_iface=usb0
        fi
        ifconfig -a
        if [ -z "$usb_iface" ]; then
            usb_info "initrd Debug: ERROR: could not setup USB as usb0 or rndis0"
            dmesg
            sleep 60
            reboot -f
        fi
        {
            echo "start 192.168.2.20"
            echo "end 192.168.2.90"
            echo "lease_file /var/udhcpd.leases"
            echo "interface $usb_iface"
            echo "option subnet 255.255.255.0"
        } >> /etc/udhcpd.conf
        udhcpd
        telnetd -b 192.168.2.15:23 -l /bin/sh
        usb_info "initrd Debug: PANIC for reason: $1"
        ps -wlT
        ps -ef
        netstat -lnp
        cat /proc/mounts
        sync
        inject_loop
    }
    
    rootmnt="/new_root"
    mkdir -p "$rootmnt"
    
    partlist="userdata UDA DATAFS USERDATA"
    # shellcheck disable=SC3020
    exec &> /dev/kmsg
    
    mkdir -p /lib/modules
    ln -sf /lib/modules "/lib/modules/$(uname -r)"
    
    files="/override/modules.load /lib/modules/modules.load /override/modules.load.recovery /lib/modules/modules.load.recovery"
    for file in $files; do
        if [ -f "$file" ]; then
            module_list="$file"
            break
        fi
    done
    
    if [ -n "$module_list" ]; then
        tell_kmsg "Loading kernel modules from $module_list"
    
        while read -r line; do
            set -- "$line"
            # Skip commented entries
            [ "$1" = "#" ] && continue
            tell_kmsg "Loading module $1"
            modprobe -a "$1"
        done < "${module_list}"
        sleep 1
        tell_kmsg "Finished loading kernel modules"
    fi
    
    if [ -e /proc/bootconfig ]; then
        ab_slot_suffix=$(grep -o 'androidboot\.slot_suffix = ".."' /proc/bootconfig | cut -d '"' -f2)
    fi

    # shellcheck disable=SC2013
    for param in $(cat /proc/cmdline); do
        case "$param" in
            datapart=*) path=${param#*=} ;;
            androidboot.slot_suffix=*) [ -z "$ab_slot_suffix" ] && ab_slot_suffix=${param#*=} ;;
        esac
    done

    [ -n "$ab_slot_suffix" ] && tell_kmsg "A/B slot system detected! Slot suffix is $ab_slot_suffix"
    
    if [ -z "$path" ]; then
        for partname in $partlist; do
            part=$(find /dev -name "$partname" -print -quit)
            [ -z "$part" ] && continue
            path=$(readlink -f "$part")
            [ -n "$path" ] && break
        done
    fi
    
    if [ -z "$path" ] && [ -n "$ab_slot_suffix" ] ; then
        tell_kmsg "Searching for A/B data partition on slot $ab_slot_suffix."
    
        for partname in $partlist; do
            part=$(find /dev -name "$partname$ab_slot_suffix" -print -quit)
            [ -z "$part" ] && continue
            path=$(readlink -f "$part")
            [ -n "$path" ] && break
        done
    fi
    
    if [ -z "$path" ]; then
        panic "Couldn't find data partition."
    fi
    
    mkdir /vendor
    mkdir /vendor_dlkm
    if [ -e "/dev/disk/by-partlabel/super" ]; then
        tell_kmsg "Mapping super partition"
        dmsetup create --concise "$(parse-android-dynparts /dev/disk/by-partlabel/super)" \
            || panic "Failed to create dynamic partitions from super"
    fi
    
    vendor_images="/dev/disk/by-partlabel/vendor${ab_slot_suffix} /dev/disk/by-partlabel/vendor_a /dev/disk/by-partlabel/vendor_b /dev/mapper/dynpart-vendor /dev/mapper/dynpart-vendor${ab_slot_suffix} /dev/mapper/dynpart-vendor_a /dev/mapper/dynpart-vendor_b"
    for image in $vendor_images; do
        if [ -e "$image" ]; then
            tell_kmsg "mounting vendor from $image"
            mount "$image" /vendor -o ro
    
            if [ -e "/vendor/build.prop" ]; then
                tell_kmsg "found valid vendor partition: $image"
                break
            else
                tell_kmsg "$image is not a valid vendor partition"
                umount /vendor
            fi
        fi
    done
    
    vendor_dlkm_images="/dev/mapper/dynpart-vendor_dlkm /dev/mapper/dynpart-vendor_dlkm${ab_slot_suffix} /dev/mapper/dynpart-vendor_dlkm_a /dev/mapper/dynpart-vendor_dlkm_b"
    for image in $vendor_dlkm_images; do
        if [ -e "$image" ]; then
            tell_kmsg "mounting vendor_dlkm from $image"
            mount "$image" /vendor_dlkm -o ro
    
            if [ -e "/vendor_dlkm/etc/build.prop" ]; then
                tell_kmsg "found valid vendor_dlkm partition: $image"
                break
            else
                tell_kmsg "$image is not a valid vendor_dlkm partition"
                umount /vendor_dlkm
            fi
        fi
    done
    
    mkdir -p /halium-system
    
    tell_kmsg "Halium rootfs is $path"
    
    tell_kmsg "mounting system rootfs at /halium-system"
    if [ -n "$path" ]; then
        mount -o rw "$path" /halium-system || panic "Failed to mount ${path} at /halium-system"
        if [ "$(blkid "${path}" -o value -s TYPE)" = "ext4" ]; then
            if [ -e /halium-system/rootfs.img ]; then
                mkdir -p /tmp-rootfs-mnt
                mount -o loop,rw /halium-system/rootfs.img /tmp-rootfs-mnt || panic "Failed to mount rootfs.img"
                umount /halium-system
                mount --move /tmp-rootfs-mnt /halium-system
                tell_kmsg "Mounted rootfs.img at /halium-system"
            elif [ -e /halium-system/var/lib/halium/requires-resize ]; then
                tell_kmsg "Resizing ext4 filesystem on ${path}"
                e2fsck -fy "${path}"
                resize2fs -f "${path}"
                rm -f /halium-system/var/lib/halium/requires-resize
            fi
        else
            tell_kmsg "Unsupported filesystem on part ${part}"
        fi
    fi
    
    mkdir -p /android-rootfs
    mkdir -p /android-system
    
    ANDROID_IMAGE="/halium-system/var/lib/lxc/android/android-rootfs.img"
    if [ ! -f "${ANDROID_IMAGE}" ]; then
        tell_kmsg "WARNING: Android system image not found."
    fi
    
    mount -o loop,ro "${ANDROID_IMAGE}" /android-rootfs \
        || tell_kmsg "WARNING: Failed to mount Android system.img."
    mount -o bind /android-rootfs/system /android-system
    
    if [ -n "$path" ]; then
        tell_kmsg "Normal boot"
    
        mount --move /halium-system ${rootmnt}
        mkdir -p ${rootmnt}/android
        mount --move /android-rootfs ${rootmnt}/var/lib/lxc/android/rootfs
        mount -o bind ${rootmnt}/var/lib/lxc/android/rootfs ${rootmnt}/android
        mkdir -p ${rootmnt}/android/data ${rootmnt}/android/system
        mkdir -p ${rootmnt}/userdata/android-data
        mount -o bind ${rootmnt}/userdata/android-data ${rootmnt}/android/data
    
        tell_kmsg "moving Android system to /android/system"
        mount --move /android-system ${rootmnt}/android/system

        udev_rules_file="${rootmnt}/etc/udev/rules.d/70-device.rules"

        if [ ! -e "$udev_rules_file" ]; then
            cat ${rootmnt}/var/lib/lxc/android/rootfs/ueventd*.rc /vendor/ueventd*.rc 2>/dev/null | \
            grep ^/dev | \
            sed -e 's|^/dev/||' | \
            awk '{printf "ACTION==\"add\", KERNEL==\"%s\", OWNER=\"%s\", GROUP=\"%s\", MODE=\"%s\"\n",$1,$3,$4,$2}' | \
            sed -e 's/\r//' \
            > "$udev_rules_file"

            # FIXME: ADD QCOM SUPPORT
            for file in /vendor/etc/init/hw/init.mt*.rc; do
                [ -e "$file" ] || continue
                awk '
                    $1 == "chown" && $4 ~ /^\/dev\// {
                        chown[$4] = $2 ":" $3
                    }
            
                    $1 == "chmod" && $3 ~ /^\/dev\// {
                        chmod[$3] = $2
                    }
            
                    END {
                        for (dev in chown) {
                            if (dev in chmod) {
                                split(chown[dev], parts, ":")
                                owner = parts[1]
                                group = parts[2]
                                mode = chmod[dev]
                                sub(".*/", "", dev)
                                print "ACTION==\"add\", KERNEL==\"" dev "\", OWNER=\"" owner "\", GROUP=\"" group "\", MODE=\"" mode "\""
                            }
                        }
                    }
                ' "$file" >> "$udev_rules_file"
            done
            sed -i '/GROUP="radio"\|GROUP="root"\|GROUP="system"/!s/GROUP="\([^"]*\)"/GROUP="android_\1"/' "$udev_rules_file"
            sort -u "$udev_rules_file" -o "$udev_rules_file" 
        fi
    
        if [ -e "/vendor/build.prop" ]; then
            tell_kmsg "moving Android vendor to /android/vendor"
            mkdir -p ${rootmnt}/android/vendor
            mount --move /vendor ${rootmnt}/android/vendor
        fi
    
        if [ -e "/vendor_dlkm/etc/build.prop" ]; then
            tell_kmsg "moving Android vendor_dlkm to /android/vendor_dlkm"
            mkdir -p ${rootmnt}/android/vendor_dlkm
            mount --move /vendor_dlkm ${rootmnt}/android/vendor_dlkm
        fi

    else
        panic "Couldn't find system partition."
    fi
}

# vim: set ft=sh ts=4 sw=4 et:
